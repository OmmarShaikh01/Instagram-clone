[tool.poetry]
name = "instagram_clone"
version = "0.1.0"
description = ""
authors = ["Ommar Shaikh <ommarshaikh20@gmail.com>"]
readme = "README.md"


[tool.poetry.dependencies]
python = ">=3.10,<3.12"
django = "^4.1.4"
djangorestframework = "^3.14.0"
dynaconf = "^3.1.11"


[tool.poetry.group.dev.dependencies]
nox = "^2022.11.21"
coverage = { extras = ["toml"], version = "^6.5.0" }
black = "^22.12.0"
pylint = "^2.15.8"
isort = "^5.10.1"
python-dotenv = { extras = ["cli"], version = "^0.21.0" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.isort]
py_version = 310
profile = "black"
line_length = "120"
known_first_party = []
skip = [".github", ".nox", ".venv", ".pytest_cache", "dist", "docs"]
skip_gitignore = true
atomic = true
lines_after_imports = 2
ignore_comments = true
virtual_env = './venv'
remove_redundant_aliases = true
color_output = true
supported_extensions = ["py"]


[tool.black]
--check = "no"
diff = "no"
color = true
line-length = 100
exclude = '/(\.direnv|\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|venv|\.svn|_build|buck-out|build|dist|__pypackages__|\.pyi)/'
include = '\.py?$'
target-version = ["py310"]


[tool.pylint.main]
extension-pkg-allow-list = []
fail-under = 1000
ignore = [".github", ".nox", ".venv", ".pytest_cache", "dist", "docs"]
ignore-paths = '/(\.direnv|\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|venv|\.svn|_build|buck-out|build|dist|__pypackages__|\.pyi)/'
ignore-patterns = '(.*temp\.py$)'
jobs = 0
limit-inference-results = 100
persistent = true
py-version = "3.10"
recursive = true
suggestion-mode = true


[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
class-rgx = "[A-Z][a-z]+"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "($^|^__)"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"


[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]


[tool.pylint.design]
max-args = 5
max-attributes = 20
max-bool-expr = 5
max-branches = 20
max-locals = 15
max-parents = 7
max-public-methods = 50
max-returns = 6
max-statements = 100
min-public-methods = 0


[tool.pylint.exceptions]
overgeneral-exceptions = ["BaseException", "Exception"]


[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100


[tool.pylint.imports]
allow-wildcard-with-all = false
known-third-party = ["enchant"]


[tool.pylint.logging]
logging-format-style = "new"
logging-modules = ["logging"]


[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "bare-except",
    "logging-fstring-interpolation",
    "invalid-name",
    "missing-module-docstring",
    "unnecessary-lambda",
    "too-many-statements",
    "unused-argument",
]
enable = ["c-extension-no-member"]


[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]


[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]


[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 100.0 - ((float(5 * error + warning + refactor + convention) / statement) * 100))"
output-format = "text:./tests/linter_output.txt,colorized"
reports = false
score = true


[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4


[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"


[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"


[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb", "call_on"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]
